Step 1: Create the BookController Class
package com.example.bookstoreapi.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class Book {
    private Long id;
    private String title;
    private String author;
    private Double price;
    private String isbn;
}
Create the BookController Class:
package com.example.bookstoreapi.controller;

import com.example.bookstoreapi.model.Book;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;

@RestController
@RequestMapping("/api/books")
public class BookController {

    private List<Book> books = new ArrayList<>();

    
    public BookController() {
        books.add(new Book(1L, "The Great Gatsby", "F. Scott Fitzgerald", 10.99, "9780743273565"));
        books.add(new Book(2L, "1984", "George Orwell", 8.99, "9780451524935"));
    }

    
    @GetMapping
    public List<Book> getAllBooks() {
        return books;
    }

    
    @GetMapping("/{id}")
    public ResponseEntity<Book> getBookById(@PathVariable Long id) {
        return books.stream()
                .filter(book -> book.getId().equals(id))
                .findFirst()
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    
    @PostMapping
    public ResponseEntity<Book> createBook(@RequestBody Book book) {
        book.setId((long) (books.size() + 1));
        books.add(book);
        return ResponseEntity.status(HttpStatus.CREATED).body(book);
    }

    
    @PutMapping("/{id}")
    public ResponseEntity<Book> updateBook(@PathVariable Long id, @RequestBody Book bookDetails) {
        return books.stream()
                .filter(book -> book.getId().equals(id))
                .findFirst()
                .map(book -> {
                    book.setTitle(bookDetails.getTitle());
                    book.setAuthor(bookDetails.getAuthor());
                    book.setPrice(bookDetails.getPrice());
                    book.setIsbn(bookDetails.getIsbn());
                    return ResponseEntity.ok(book);
                })
                .orElse(ResponseEntity.notFound().build());
    }

    
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteBook(@PathVariable Long id) {
        boolean removed = books.removeIf(book -> book.getId().equals(id));
        if (removed) {
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}
Step 2: Handle HTTP Methods
The BookController class handles the following HTTP methods:

GET /api/books: Returns a list of all books.
GET /api/books/{id}: Returns a single book by its ID.
POST /api/books: Creates a new book.
PUT /api/books/{id}: Updates an existing book by its ID.
DELETE /api/books/{id}: Deletes a book by its ID.

Step 3: Return JSON Responses
JSON Response: The BookController automatically returns JSON responses because it uses the @RestController annotation, which combines @Controller and @ResponseBody to convert the returned objects into JSON.
Sample Test Using Postman or Curl
GET all books:

URL: http://localhost:8080/api/books
[
    {
        "id": 1,
        "title": "The Great Gatsby",
        "author": "F. Scott Fitzgerald",
        "price": 10.99,
        "isbn": "9780743273565"
    },
    {
        "id": 2,
        "title": "1984",
        "author": "George Orwell",
        "price": 8.99,
        "isbn": "9780451524935"
    }
]
POST a new book:

URL: http://localhost:8080/api/books
{
    "title": "To Kill a Mockingbird",
    "author": "Harper Lee",
    "price": 7.99,
    "isbn": "9780060935467"
}
{
    "id": 3,
    "title": "To Kill a Mockingbird",
    "author": "Harper Lee",
    "price": 7.99,
    "isbn": "9780060935467"
}
