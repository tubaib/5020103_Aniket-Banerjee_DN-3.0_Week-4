Step 1: Handling Path Variables
@GetMapping("/{id}")
public ResponseEntity<Book> getBookById(@PathVariable Long id) {
    return books.stream()
            .filter(book -> book.getId().equals(id))
            .findFirst()
            .map(ResponseEntity::ok)
            .orElse(ResponseEntity.notFound().build());
}
Step 2: Handling Query Parameters
@GetMapping("/search")
public List<Book> searchBooks(@RequestParam(required = false) String title,
                              @RequestParam(required = false) String author) {
    return books.stream()
            .filter(book -> (title == null || book.getTitle().toLowerCase().contains(title.toLowerCase())) &&
                            (author == null || book.getAuthor().toLowerCase().contains(author.toLowerCase())))
            .toList();
}
Sample Test Using Postman or Curl
Fetch a Book by ID:

URL: http://localhost:8080/api/books/1
Method: GET
{
    "id": 1,
    "title": "The Great Gatsby",
    "author": "F. Scott Fitzgerald",
    "price": 10.99,
    "isbn": "9780743273565"
}
Search Books by Title:

URL: http://localhost:8080/api/books/search?title=1984
Method: GET
[
    {
        "id": 2,
        "title": "1984",
        "author": "George Orwell",
        "price": 8.99,
        "isbn": "9780451524935"
    }
]
Search Books by Author:

URL: http://localhost:8080/api/books/search?author=Fitzgerald
Method: GET
[
    {
        "id": 1,
        "title": "The Great Gatsby",
        "author": "F. Scott Fitzgerald",
        "price": 10.99,
        "isbn": "9780743273565"
    }
]
Search Books by Title and Author:

URL: http://localhost:8080/api/books/search?title=The Great Gatsby&author=Fitzgerald
Method: GET
[
    {
        "id": 1,
        "title": "The Great Gatsby",
        "author": "F. Scott Fitzgerald",
        "price": 10.99,
        "isbn": "9780743273565"
    }
]
